stages:
  - build
  - test
  - review
  - release
  - staging
  - production
  - cleanup

.extended_deploy:
  image: dtzar/helm-kubectl:3.13
  variables:
    GIT_STRATEGY: none
    KUBE_CONTEXT: ${CI_PROJECT_PATH}:yc-k8s
    name: ${CI_ENVIRONMENT_SLUG}
    envname: review/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}
    host: ${name}.${CI_PAGES_DOMAIN}
    reg: ${CI_REGISTRY}/shrkga
    repo: https://${CI_SERVER_HOST}/shrkga
  before_script:
    - >
      function dependencies() {
        # installing dependencies
        apk add -U openssl curl tar gzip bash ca-certificates git
        wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
        curl -fsSL https://storage.googleapis.com/pub/gsutil.tar.gz | tar -xz -C ${HOME}
        export PATH=${PATH}:${HOME}/gsutil
        curl -fsSL https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh -o /usr/bin/sync-repo.sh
        chmod a+x /usr/bin/sync-repo.sh
      }
    - >
      function namespace() {
        echo ${KUBE_NAMESPACE}
        # ensuring namespace
        kubectl config get-contexts
        kubectl config use-context ${KUBE_CONTEXT}
        kubectl describe namespace "${KUBE_NAMESPACE}" || kubectl create namespace "${KUBE_NAMESPACE}"
      }
    - >
      function deploy() {
        echo "Clone deploy repository..."
        git clone https://${CI_SERVER_HOST}/shrkga/reddit-deploy.git
        cd reddit-deploy/

        mkdir -p reddit/chats
        helm dep build reddit
        echo "Deploy helm release $name to $KUBE_NAMESPACE"

        for HCMD in 'helm template' 'helm upgrade --install --wait --atomic'
        do
          ${HCMD} \
            --set ui.ingress.host="$host" \
            --set ui.image.repository=${reg}/ui \
            --set ui.image.tag="$(curl -fsSL ${repo}/ui/raw/main/VERSION)" \
            --set post.image.repository=${reg}/post \
            --set post.image.tag="$(curl -fsSL ${repo}/post/raw/main/VERSION)" \
            --set comment.image.repository=${reg}/comment \
            --set comment.image.tag="$(curl -fsSL ${repo}/comment/raw/main/VERSION)" \
            --namespace="$KUBE_NAMESPACE" --create-namespace \
            --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
            "$name" \
            reddit/
        done
      }

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Building
    - echo "Building and pushing Dockerfile-based application..."
    - echo `git show --format="%h" HEAD | head -1` > build_info.txt
    - echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    - /kaniko/executor
      --cache=true
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    - echo ""
  only:
   - branches

test:
  stage: test
  script:
    - env
    - exit 0
  only:
    - branches

release:
  stage: release
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    DOCKER_REGISTRY: index.docker.io
    DOCKER_APP_REPO: ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}
  script:
    # Releasing
    - echo "Updating docker images ..."
    - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - crane auth login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - VTAG=$(cat VERSION)
    - for CVTAG in ${VTAG} latest; do crane tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} ${CVTAG}; done
    - crane copy ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} ${DOCKER_APP_REPO}:${VTAG}
    - crane tag ${DOCKER_APP_REPO}:${VTAG} latest
  only:
    - main

review:
  stage: review
  variables:
    KUBE_NAMESPACE: review
  extends: .extended_deploy
  environment:
    name: ${envname}
    url: http://${host}
    on_stop: stop_review
  script:
    - dependencies
    - namespace
    - echo "Clone deploy repository..."
    - git clone https://${CI_SERVER_HOST}/shrkga/reddit-deploy.git
    - echo "Download helm dependencies..."
    - helm dep update reddit-deploy/reddit
    - echo "Deploy helm release ${name} to ${KUBE_NAMESPACE}"
    - echo "Upgrading existing release..."
    - >
      helm upgrade --install \
        --wait \
        --atomic \
        --set ${CI_PROJECT_NAME}.ingress.host="${host}" \
        --set ${CI_PROJECT_NAME}.image.repository=${CI_REGISTRY_IMAGE} \
        --set ${CI_PROJECT_NAME}.image.tag=${CI_COMMIT_SHA} \
        --namespace="${KUBE_NAMESPACE}" \
        --version="${CI_PIPELINE_ID}-${CI_JOB_ID}" \
        "${name}" \
        reddit-deploy/reddit/
  except:
    - main

staging:
  stage: staging
  variables:
    KUBE_NAMESPACE: staging
  extends: .extended_deploy
  environment:
    name: staging
    url: http://${host}
  script:
    - export track="${1-stable}"
    - dependencies
    - namespace
    - deploy
  only:
    refs:
      - main
  except:
    - triggers

production:
  stage: production
  variables:
    KUBE_NAMESPACE: production
  extends: .extended_deploy
  environment:
    name: production
    url: http://${host}
  script:
    - export track="${1-stable}"
    - dependencies
    - namespace
    - deploy
  when: manual
  only:
    refs:
      - main
  except:
    - triggers

stop_review:
  stage: cleanup
  variables:
    KUBE_NAMESPACE: review
  extends: .extended_deploy
  environment:
    name: ${envname}
    action: stop
  script:
    - dependencies
    - namespace
    - helm delete "${name}" --namespace="${KUBE_NAMESPACE}" || true
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - main
